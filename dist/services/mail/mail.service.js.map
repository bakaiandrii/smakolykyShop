{"version":3,"file":"mail.service.js","sourceRoot":"","sources":["../../../src/services/mail/mail.service.ts"],"names":[],"mappings":";;;AAAA,yCAAyC;AACzC,yCAAyC;AACzC,yBAAyB;AACzB,6BAA6B;AAG7B,yCAAsC;AACtC,2DAAsD;AAEtD,MAAM,gBAAgB,GAAG;IACvB,WAAW,EAAE,eAAM,CAAC,YAAY;CACjC,CAAC;AAEF,MAAM,WAAW,GAAG,UAAU,CAAC,eAAe,CAAC;IAC7C,OAAO,EAAE,eAAM,CAAC,kBAAkB;IAClC,IAAI,EAAE;QACJ,IAAI,EAAE,eAAM,CAAC,UAAU;QACvB,IAAI,EAAE,eAAM,CAAC,mBAAmB;KACjC;CACF,CAAC,CAAC;AAEH,IAAI;IACF,WAAW,CAAC,MAAM,EAAE,CAAC;IACrB,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;CACzC;AAAC,OAAO,GAAG,EAAE;IACZ,OAAO,CAAC,KAAK,CAAC,wCAAwC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;CAC9E;AAED,MAAM,WAAW,GAAG,CAAC,IAAS,EAAE,IAAY,EAAO,EAAE;IACnD,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,EAAE,iBAAiB,EAAC,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;IACjG,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC/B,MAAM,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC5C,MAAM,MAAM,GAAG,QAAQ,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,gBAAgB,EAAE,CAAC,CAAC;IAE1D,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,WAAW;IACf,KAAK,CAAC,gBAAgB,CAAC,KAAa,EAAE,MAAkB,EAAE,UAAe,EAAE;QACzE,MAAM,YAAY,GAAG,+BAAa,CAAC,MAAM,CAAC,CAAC;QAE3C,MAAM,IAAI,GAAG,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,gBAAgB,CAAC,CAAC;QACjE,MAAM,WAAW,GAAG;YAClB,IAAI,EAAE,YAAY,eAAM,CAAC,UAAU,GAAG;YACtC,EAAE,EAAE,KAAK;YACT,OAAO,EAAE,YAAY,CAAC,OAAO;YAC7B,IAAI;SACL,CAAC;QACF,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACvD,OAAO,CAAC,GAAG,CAAC,gCAAgC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAEtE,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,4BAA4B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SAClE;IAEH,CAAC;CACF;AAEY,QAAA,YAAY,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import * as nodemailer from 'nodemailer';\r\nimport * as handlebars from 'handlebars';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\nimport { ActionEnum } from '../../constants';\r\nimport { config } from '../../config';\r\nimport { htmlTemplates } from '../../email-templates';\r\n\r\nconst contextEctension = {\r\n  frontendUrl: config.FRONTEND_URL\r\n};\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: config.ROOT_EMAIL_SERVICE,\r\n  auth: {\r\n    user: config.ROOT_EMAIL,\r\n    pass: config.ROOT_EMAIL_PASSWORD\r\n  }\r\n});\r\n\r\ntry {\r\n  transporter.verify();\r\n  console.log('Mail connection verified');\r\n} catch (err) {\r\n  console.error(`Mail connection not verified. Error: ${JSON.stringify(err)}`);\r\n}\r\n\r\nconst getTemplate = (data: any, type: string): any => {\r\n  const file = fs.readFileSync(path.resolve(__dirname, '../../', 'email-templates',`${type}.hbs`));\r\n  const source = file.toString();\r\n  const template = handlebars.compile(source);\r\n  const result = template({ ...data, ...contextEctension });\r\n\r\n  return result;\r\n};\r\n\r\nclass MailService {\r\n  async sendEmailService(email: string, action: ActionEnum, context: any = {}): Promise<any> {\r\n    const templateInfo = htmlTemplates[action];\r\n\r\n    const html = getTemplate(context, templateInfo.templateFileName);\r\n    const messageData = {\r\n      from: `no-reply<${config.ROOT_EMAIL}>`,\r\n      to: email,\r\n      subject: templateInfo.subject,\r\n      html\r\n    };\r\n    try {\r\n      const result = await transporter.sendMail(messageData);\r\n      console.log(`Mail send successfull. Data: ${JSON.stringify(result)}`);\r\n\r\n      return result;\r\n    } catch (err) {\r\n      console.error(`Mail send failed. Error: ${JSON.stringify(err)}`);\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport const emailService = new MailService();\r\n"]}